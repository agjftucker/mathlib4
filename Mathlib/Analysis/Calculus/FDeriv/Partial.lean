/-
Copyright (c) 2025 A Tucker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: A Tucker
-/
import Mathlib.Analysis.Calculus.MeanValue

/-!
# Partial derivatives

This file concerns the partial derivatives of a bivariate function.

## Main results

- `hasStrictFDerivAt_uncurry_coprod`: establishing strict differentiability of the uncurried
  function in the product space, this requires validity of the mean value theorem in both underlying
  spaces.
-/

open scoped Convex Topology
open Asymptotics Metric

variable {ùïú E‚ÇÅ E‚ÇÇ F : Type*} [NontriviallyNormedField ùïú]
variable [NormedAddCommGroup E‚ÇÅ] [NormedAddCommGroup E‚ÇÇ] [NormedAddCommGroup F]
variable [NormedSpace ùïú E‚ÇÅ] [NormedSpace ùïú E‚ÇÇ] [NormedSpace ùïú F]

/-- If a bivariate function has partial derivatives $f_1$ and $f_2$ in a neighbourhood of a point
$(x_1,x_2)$, continuous at that point, then it is strictly differentiable there with derivative
$(\xi_1,\xi_2)\mapsto f_1(x_1,x_2)\cdot\xi_1 + f_2(x_1,x_2)\cdot\xi_2$. -/
theorem hasStrictFDerivAt_uncurry_coprod [IsRCLikeNormedField ùïú]
    [NormedSpace ‚Ñù E‚ÇÅ] [NormedSpace ‚Ñù E‚ÇÇ] {f : E‚ÇÅ ‚Üí E‚ÇÇ ‚Üí F} {x‚ÇÅ : E‚ÇÅ} {x‚ÇÇ : E‚ÇÇ}
    {f‚ÇÅ : E‚ÇÅ ‚Üí E‚ÇÇ ‚Üí E‚ÇÅ ‚ÜíL[ùïú] F} (cf‚ÇÅ : ContinuousAt ‚Üøf‚ÇÅ (x‚ÇÅ, x‚ÇÇ))
    (df‚ÇÅ : ‚àÄ·∂† y in ùìù (x‚ÇÅ, x‚ÇÇ), HasFDerivAt (f ¬∑ y.2) (‚Üøf‚ÇÅ y) y.1)
    {f‚ÇÇ : E‚ÇÅ ‚Üí E‚ÇÇ ‚Üí E‚ÇÇ ‚ÜíL[ùïú] F} (cf‚ÇÇ : ContinuousAt ‚Üøf‚ÇÇ (x‚ÇÅ, x‚ÇÇ))
    (df‚ÇÇ : ‚àÄ·∂† y in ùìù (x‚ÇÅ, x‚ÇÇ), HasFDerivAt (f y.1 ¬∑) (‚Üøf‚ÇÇ y) y.2) :
    HasStrictFDerivAt ‚Üøf ((f‚ÇÅ x‚ÇÅ x‚ÇÇ).coprod (f‚ÇÇ x‚ÇÅ x‚ÇÇ)) (x‚ÇÅ, x‚ÇÇ) := by
  rw [hasStrictFDerivAt_iff_isLittleO]
  calc
    fun (y, z) => f y.1 y.2 - f z.1 z.2 - ((f‚ÇÅ x‚ÇÅ x‚ÇÇ).coprod (f‚ÇÇ x‚ÇÅ x‚ÇÇ)) (y - z)
    _ = fun (y, z) => (f y.1 z.2 - f z.1 z.2 - f‚ÇÅ x‚ÇÅ x‚ÇÇ (y.1 - z.1))
          + (f y.1 y.2 - f y.1 z.2 - f‚ÇÇ x‚ÇÅ x‚ÇÇ (y.2 - z.2)) := by
      ext
      dsimp only [ContinuousLinearMap.coprod_apply]
      abel
    _ =o[ùìù ((x‚ÇÅ, x‚ÇÇ), (x‚ÇÅ, x‚ÇÇ))] fun (y, z) => y - z := by
      simp_rw [continuousAt_iff', dist_eq_norm] at cf‚ÇÅ cf‚ÇÇ
      apply IsLittleO.add
      ¬∑ calc
          fun (y, z) => f y.1 z.2 - f z.1 z.2 - f‚ÇÅ x‚ÇÅ x‚ÇÇ (y.1 - z.1)
          _ =o[ùìù ((x‚ÇÅ, x‚ÇÇ), (x‚ÇÅ, x‚ÇÇ))] (fun (y, z) => y.1 - z.1 : _ ‚Üí E‚ÇÅ) := by
            simp_rw [isLittleO_iff, eventually_nhds_iff_ball]
            intro Œµ hŒµ
            obtain ‚ü®Œ¥, hŒ¥, hf‚ÇÅ‚ü© := eventually_nhds_iff_ball.mp ((cf‚ÇÅ Œµ hŒµ).and df‚ÇÅ)
            use Œ¥, hŒ¥
            simp_rw [‚Üê ball_prod_same] at ‚ä¢ hf‚ÇÅ
            intro (y, z) ‚ü®hy, hz‚ü©
            exact Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le' (f := fun u => f u z.2)
              (fun u hu => (hf‚ÇÅ (u, z.2) ‚ü®hu, hz.2‚ü©).2.hasFDerivWithinAt)
              (fun u hu => (hf‚ÇÅ (u, z.2) ‚ü®hu, hz.2‚ü©).1.le)
              (convex_ball x‚ÇÅ Œ¥) hz.1 hy.1
          _ =O[ùìù ((x‚ÇÅ, x‚ÇÇ), (x‚ÇÅ, x‚ÇÇ))] (fun (y, z) => y - z : _ ‚Üí E‚ÇÅ √ó E‚ÇÇ) := by
            simp [isBigO_of_le]
      ¬∑ calc
          fun (y, z) => f y.1 y.2 - f y.1 z.2 - f‚ÇÇ x‚ÇÅ x‚ÇÇ (y.2 - z.2)
          _ =o[ùìù ((x‚ÇÅ, x‚ÇÇ), (x‚ÇÅ, x‚ÇÇ))] (fun (y, z) => y.2 - z.2 : _ ‚Üí E‚ÇÇ) := by
            simp_rw [isLittleO_iff, eventually_nhds_iff_ball]
            intro Œµ hŒµ
            obtain ‚ü®Œ¥, hŒ¥, hf‚ÇÇ‚ü© := eventually_nhds_iff_ball.mp ((cf‚ÇÇ Œµ hŒµ).and df‚ÇÇ)
            use Œ¥, hŒ¥
            simp_rw [‚Üê ball_prod_same] at ‚ä¢ hf‚ÇÇ
            intro (y, z) ‚ü®hy, hz‚ü©
            exact Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le'
              (fun v hv => (hf‚ÇÇ (y.1, v) ‚ü®hy.1, hv‚ü©).2.hasFDerivWithinAt)
              (fun v hv => (hf‚ÇÇ (y.1, v) ‚ü®hy.1, hv‚ü©).1.le)
              (convex_ball x‚ÇÇ Œ¥) hz.2 hy.2
          _ =O[ùìù ((x‚ÇÅ, x‚ÇÇ), (x‚ÇÅ, x‚ÇÇ))] (fun (y, z) => y - z : _ ‚Üí E‚ÇÅ √ó E‚ÇÇ) := by
            simp [isBigO_of_le]

theorem hasFDerivWithinAt_uncurry_of_continuousWithinAt_snd
    [IsRCLikeNormedField ùïú] [NormedSpace ‚Ñù E‚ÇÇ] {f : E‚ÇÅ ‚Üí E‚ÇÇ ‚Üí F} {x‚ÇÅ : E‚ÇÅ} {x‚ÇÇ : E‚ÇÇ}
    {s‚ÇÅ : Set E‚ÇÅ} {s‚ÇÇ : Set E‚ÇÇ} (seg : ‚àÄ·∂† y‚ÇÇ in ùìù[s‚ÇÇ] x‚ÇÇ, [x‚ÇÇ -[‚Ñù] y‚ÇÇ] ‚äÜ s‚ÇÇ)
    {f‚ÇÅx : E‚ÇÅ ‚ÜíL[ùïú] F} (df‚ÇÅx : HasFDerivWithinAt (f ¬∑ x‚ÇÇ) f‚ÇÅx s‚ÇÅ x‚ÇÅ)
    {f‚ÇÇ : E‚ÇÅ ‚Üí E‚ÇÇ ‚Üí E‚ÇÇ ‚ÜíL[ùïú] F} (cf‚ÇÇ : ContinuousWithinAt ‚Üøf‚ÇÇ (s‚ÇÅ √óÀ¢ s‚ÇÇ) (x‚ÇÅ, x‚ÇÇ))
    (df‚ÇÇ : ‚àÄ·∂† y in ùìù[s‚ÇÅ √óÀ¢ s‚ÇÇ] (x‚ÇÅ, x‚ÇÇ), HasFDerivWithinAt (f y.1 ¬∑) (f‚ÇÇ y.1 y.2) s‚ÇÇ y.2) :
    HasFDerivWithinAt ‚Üøf (f‚ÇÅx.coprod (f‚ÇÇ x‚ÇÅ x‚ÇÇ)) (s‚ÇÅ √óÀ¢ s‚ÇÇ) (x‚ÇÅ, x‚ÇÇ) := by
  rw [HasFDerivWithinAt, hasFDerivAtFilter_iff_isLittleO, nhdsWithin_prod_eq]
  calc
    fun y => ‚Üøf y - f x‚ÇÅ x‚ÇÇ - (f‚ÇÅx.coprod (f‚ÇÇ x‚ÇÅ x‚ÇÇ)) (y.1 - x‚ÇÅ, y.2 - x‚ÇÇ)
    _ = fun y => f y.1 x‚ÇÇ - f x‚ÇÅ x‚ÇÇ - f‚ÇÅx (y.1 - x‚ÇÅ) + (‚Üøf y - f y.1 x‚ÇÇ - f‚ÇÇ x‚ÇÅ x‚ÇÇ (y.2 - x‚ÇÇ)) := by
      ext
      rw [ContinuousLinearMap.coprod_apply]
      abel
    _ =o[ùìù[s‚ÇÅ] x‚ÇÅ √óÀ¢ ùìù[s‚ÇÇ] x‚ÇÇ] fun y => (y.1 - x‚ÇÅ, y.2 - x‚ÇÇ) := by
      apply IsLittleO.add
      ¬∑ calc
          _ = (fun y‚ÇÅ => f y‚ÇÅ x‚ÇÇ - f x‚ÇÅ x‚ÇÇ - f‚ÇÅx (y‚ÇÅ - x‚ÇÅ)) ‚àò Prod.fst := by
            rw [Function.comp_def]
          _ =o[ùìù[s‚ÇÅ] x‚ÇÅ √óÀ¢ ùìù[s‚ÇÇ] x‚ÇÇ] ((fun y‚ÇÅ => y‚ÇÅ - x‚ÇÅ) ‚àò Prod.fst) := by
            apply IsLittleO.comp_fst
            rwa [HasFDerivWithinAt, hasFDerivAtFilter_iff_isLittleO] at df‚ÇÅx
          _ =O[ùìù[s‚ÇÅ] x‚ÇÅ √óÀ¢ ùìù[s‚ÇÇ] x‚ÇÇ] fun y => (y.1 - x‚ÇÅ, y.2 - x‚ÇÇ) := by
            apply isBigO_of_le
            simp
      ¬∑ calc
          fun y => ‚Üøf y - f y.1 x‚ÇÇ - f‚ÇÇ x‚ÇÅ x‚ÇÇ (y.2 - x‚ÇÇ)
          _ =o[ùìù[s‚ÇÅ] x‚ÇÅ √óÀ¢ ùìù[s‚ÇÇ] x‚ÇÇ] fun y => y.2 - x‚ÇÇ := by
            rw [isLittleO_iff]
            intro Œµ hŒµ
            have hf‚ÇÇ := (continuousWithinAt_iff'.mp cf‚ÇÇ Œµ hŒµ).and df‚ÇÇ
            rw [Filter.eventually_iff, mem_nhdsWithin_iff] at hf‚ÇÇ
            obtain ‚ü®Œ¥, hŒ¥, hf‚ÇÇ‚ü© := hf‚ÇÇ
            apply (seg.prod_inr (ùìù[s‚ÇÅ] x‚ÇÅ)).mp
            rw [‚Üê nhdsWithin_prod_eq, Filter.eventually_iff, mem_nhdsWithin_iff]
            use Œ¥, hŒ¥
            intro (y‚ÇÅ, y‚ÇÇ) hy hs‚ÇÇ
            rw [‚Üê ball_prod_same, Set.prod_inter_prod] at hy hf‚ÇÇ
            simp_rw [Set.subset_setOf, dist_eq_norm] at hf‚ÇÇ
            have hb‚ÇÇ := convex_iff_segment_subset.mp (convex_ball x‚ÇÇ Œ¥) (mem_ball_self hŒ¥) hy.2.1
            exact Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le'
              (fun z hz => (hf‚ÇÇ (y‚ÇÅ, z) ‚ü®hy.1, hb‚ÇÇ hz, hs‚ÇÇ hz‚ü©).2.mono hs‚ÇÇ)
              (fun z hz => (hf‚ÇÇ (y‚ÇÅ, z) ‚ü®hy.1, hb‚ÇÇ hz, hs‚ÇÇ hz‚ü©).1.le)
              (convex_segment x‚ÇÇ y‚ÇÇ) (left_mem_segment ‚Ñù x‚ÇÇ y‚ÇÇ) (right_mem_segment ‚Ñù x‚ÇÇ y‚ÇÇ)
          _ =O[ùìù[s‚ÇÅ] x‚ÇÅ √óÀ¢ ùìù[s‚ÇÇ] x‚ÇÇ] fun y => (y.1 - x‚ÇÅ, y.2 - x‚ÇÇ) := by
            apply isBigO_of_le
            simp
