/-
Copyright (c) 2025 A Tucker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: A Tucker
-/
import Mathlib.Analysis.Calculus.MeanValue

/-!
# Partial derivatives

This file concerns the partial derivatives of a bivariate function.

## Main results

- `hasStrictFDerivAt_uncurry_coprod`: establishing strict differentiability of the uncurried
  function in the product space, this requires validity of the mean value theorem in both underlying
  spaces.
-/

open scoped Topology

variable {ùïú X Y Z : Type*} [NontriviallyNormedField ùïú]
variable [NormedAddCommGroup X] [NormedAddCommGroup Y] [NormedAddCommGroup Z]
variable [NormedSpace ùïú X] [NormedSpace ùïú Y] [NormedSpace ùïú Z]

/-- If a bivariate function has partial derivatives $f_x$ and $f_y$ in a neighbourhood of a point
$(x_0,y_0)$, continuous at that point, then it is strictly differentiable there with derivative
$(\xi,\eta)\mapsto f_x(x_0,y_0)\cdot\xi + f_y(x_0,y_0)\cdot\eta$. -/
theorem hasStrictFDerivAt_uncurry_coprod [IsRCLikeNormedField ùïú]
    [NormedSpace ‚Ñù X] [NormedSpace ‚Ñù Y] {f : X ‚Üí Y ‚Üí Z} {x‚ÇÄ : X} {y‚ÇÄ : Y}
    {fx : X ‚Üí Y ‚Üí X ‚ÜíL[ùïú] Z} (cfx : ContinuousAt ‚Üøfx (x‚ÇÄ, y‚ÇÄ))
    (dfx : ‚àÄ·∂† p in ùìù (x‚ÇÄ, y‚ÇÄ), HasFDerivAt (f ¬∑ p.2) (‚Üøfx p) p.1)
    {fy : X ‚Üí Y ‚Üí Y ‚ÜíL[ùïú] Z} (cfy : ContinuousAt ‚Üøfy (x‚ÇÄ, y‚ÇÄ))
    (dfy : ‚àÄ·∂† p in ùìù (x‚ÇÄ, y‚ÇÄ), HasFDerivAt (f p.1 ¬∑) (‚Üøfy p) p.2) :
    HasStrictFDerivAt ‚Üøf (.coprod (fx x‚ÇÄ y‚ÇÄ) (fy x‚ÇÄ y‚ÇÄ)) (x‚ÇÄ, y‚ÇÄ) := by
  rw [hasStrictFDerivAt_iff_isLittleO, Asymptotics.isLittleO_iff]
  intro Œµ hŒµ
  obtain ‚ü®Œ¥, hŒ¥, hxy‚ü© : ‚àÉ Œ¥ > 0, ‚àÄ x y, x ‚àà Metric.ball x‚ÇÄ Œ¥ ‚Üí y ‚àà Metric.ball y‚ÇÄ Œ¥ ‚Üí
      (HasFDerivAt (f ¬∑ y) (fx x y) x ‚àß ‚Äñfx x y - fx x‚ÇÄ y‚ÇÄ‚Äñ < Œµ / 2) ‚àß
      (HasFDerivAt (f x ¬∑) (fy x y) y ‚àß ‚Äñfy x y - fy x‚ÇÄ y‚ÇÄ‚Äñ < Œµ / 2) := by
    simp_rw [‚Üê Set.forall_prod_set_iff, ball_prod_same, ‚Üê Metric.eventually_nhds_iff_ball]
    have cfx := cfx.eventually_mem (Metric.ball_mem_nhds (fx x‚ÇÄ y‚ÇÄ) (half_pos hŒµ))
    have cfy := cfy.eventually_mem (Metric.ball_mem_nhds (fy x‚ÇÄ y‚ÇÄ) (half_pos hŒµ))
    filter_upwards [dfx, cfx, dfy, cfy] with z dfx cfx dfy cfy using ‚ü®‚ü®dfx, cfx‚ü©, ‚ü®dfy, cfy‚ü©‚ü©
  rw [Metric.eventually_nhds_iff_ball]
  use Œ¥, hŒ¥
  intro ((x‚ÇÅ, y‚ÇÅ), (x‚ÇÇ, y‚ÇÇ)) hb
  rw [‚Üê ball_prod_same, ‚Üê ball_prod_same] at hb
  calc ‚Äñf x‚ÇÅ y‚ÇÅ - f x‚ÇÇ y‚ÇÇ - (fx x‚ÇÄ y‚ÇÄ (x‚ÇÅ - x‚ÇÇ) + fy x‚ÇÄ y‚ÇÄ (y‚ÇÅ - y‚ÇÇ))‚Äñ
      = ‚Äñ(f x‚ÇÅ y‚ÇÅ - f x‚ÇÇ y‚ÇÅ - fx x‚ÇÄ y‚ÇÄ (x‚ÇÅ - x‚ÇÇ)) + (f x‚ÇÇ y‚ÇÅ - f x‚ÇÇ y‚ÇÇ - fy x‚ÇÄ y‚ÇÄ (y‚ÇÅ - y‚ÇÇ))‚Äñ := by
        congr
        abel
    _ ‚â§ ‚Äñf x‚ÇÅ y‚ÇÅ - f x‚ÇÇ y‚ÇÅ - fx x‚ÇÄ y‚ÇÄ (x‚ÇÅ - x‚ÇÇ)‚Äñ + ‚Äñf x‚ÇÇ y‚ÇÅ - f x‚ÇÇ y‚ÇÇ - fy x‚ÇÄ y‚ÇÄ (y‚ÇÅ - y‚ÇÇ)‚Äñ := by
        apply norm_add_le
    _ ‚â§ Œµ / 2 * ‚Äñx‚ÇÅ - x‚ÇÇ‚Äñ + Œµ / 2 * ‚Äñy‚ÇÅ - y‚ÇÇ‚Äñ := by
        apply add_le_add
        ¬∑ exact Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le'
            (fun x hx => (hxy x y‚ÇÅ hx hb.1.2).1.1.hasFDerivWithinAt)
            (fun x hx => le_of_lt (hxy x y‚ÇÅ hx hb.1.2).1.2) (convex_ball x‚ÇÄ Œ¥) hb.2.1 hb.1.1
        ¬∑ exact Convex.norm_image_sub_le_of_norm_hasFDerivWithin_le'
            (fun y hy => (hxy x‚ÇÇ y hb.2.1 hy).2.1.hasFDerivWithinAt)
            (fun y hy => le_of_lt (hxy x‚ÇÇ y hb.2.1 hy).2.2) (convex_ball y‚ÇÄ Œ¥) hb.2.2 hb.1.2
    _ ‚â§ Œµ / 2 * ‚Äñ(x‚ÇÅ, y‚ÇÅ) - (x‚ÇÇ, y‚ÇÇ)‚Äñ + Œµ / 2 * ‚Äñ(x‚ÇÅ, y‚ÇÅ) - (x‚ÇÇ, y‚ÇÇ)‚Äñ := by
        gcongr
        ¬∑ apply le_max_left
        ¬∑ apply le_max_right
    _ = Œµ * ‚Äñ(x‚ÇÅ, y‚ÇÅ) - (x‚ÇÇ, y‚ÇÇ)‚Äñ := by ring
