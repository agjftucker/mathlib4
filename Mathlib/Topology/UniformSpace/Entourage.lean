/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Patrick Massot
-/
import Mathlib.Data.Set.Lattice.Image

/-!
# Entourages

Many definitions in metric spaces rely solely on the set `{(x, y) | dist x y ‚â§ Œµ}`. This is
called an entourage and this file provides basic definitions around entourages.
-/

assert_not_exists Filter

open Set

/-!
### Relations, seen as `Set (Œ± √ó Œ±)`
-/

variable {Œπ : Sort*} {Œ± Œ≤ : Type*} {U V W : Set (Œ± √ó Œ±)} {x y z : Œ±}

/-- The identity relation, or the graph of the identity function -/
def idRel := {(x, y) : Œ± √ó Œ± | x = y}

@[simp] lemma mem_idRel : (x, y) ‚àà @idRel Œ± ‚Üî x = y := .rfl

@[simp] lemma idRel_subset : idRel ‚äÜ U ‚Üî ‚àÄ x, (x, x) ‚àà U := by simp [subset_def]

lemma eq_singleton_left_of_prod_subset_idRel {s t : Set Œ±} (hs : s.Nonempty) (ht : t.Nonempty)
    (h_diag : s √óÀ¢ t ‚äÜ idRel) : ‚àÉ x, s = {x} := by
  rcases hs, ht with ‚ü®‚ü®s, hs‚ü©, ‚ü®t, ht‚ü©‚ü©
  refine ‚ü®s, eq_singleton_iff_nonempty_unique_mem.mpr ‚ü®‚ü®s, hs‚ü©, fun x hx ‚Ü¶ ?_‚ü©‚ü©
  rw [prod_subset_iff] at h_diag
  obtain rfl := h_diag s hs t ht
  exact h_diag x hx _ ht

lemma eq_singleton_right_prod_subset_idRel {s t : Set Œ±} (hs : s.Nonempty) (ht : t.Nonempty)
    (h_diag : s √óÀ¢ t ‚äÜ idRel) : ‚àÉ x, t = {x} := by
  rw [Set.prod_subset_iff] at h_diag
  replace h_diag := fun x hx y hy => (h_diag y hy x hx).symm
  exact eq_singleton_left_of_prod_subset_idRel ht hs (prod_subset_iff.mpr h_diag)

lemma eq_singleton_prod_subset_idRel {s t : Set Œ±} (hs : s.Nonempty) (ht : t.Nonempty)
    (h_diag : s √óÀ¢ t ‚äÜ idRel) : ‚àÉ x, s = {x} ‚àß t = {x} := by
  obtain ‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü© := eq_singleton_left_of_prod_subset_idRel hs ht h_diag,
    eq_singleton_right_prod_subset_idRel hs ht h_diag
  refine ‚ü®x, hx, ?_‚ü©
  rw [hy, Set.singleton_eq_singleton_iff]
  exact (Set.prod_subset_iff.mp h_diag x (by simp only [hx, Set.mem_singleton]) y
    (by simp only [hy, Set.mem_singleton])).symm

/-- The composition of relations -/
def compRel (U V : Set (Œ± √ó Œ±)) := {(x, z) : Œ± √ó Œ± | ‚àÉ y, (x, y) ‚àà U ‚àß (y, z) ‚àà V}

@[inherit_doc]
scoped[Uniformity] infixl:62 " ‚óã " => compRel
open Uniformity

@[simp] lemma mem_compRel : (x, z) ‚àà U ‚óã V ‚Üî ‚àÉ y, (x, y) ‚àà U ‚àß (y, z) ‚àà V := .rfl

@[simp]
lemma swap_idRel : Prod.swap '' idRel = @idRel Œ± :=
  Set.ext fun ‚ü®a, b‚ü© => by simpa [image_swap_eq_preimage_swap] using eq_comm

lemma Monotone.compRel [Preorder Œ≤] {f g : Œ≤ ‚Üí Set (Œ± √ó Œ±)} (hf : Monotone f) (hg : Monotone g) :
    Monotone fun x => f x ‚óã g x := fun _ _ h _ ‚ü®z, h‚ÇÅ, h‚ÇÇ‚ü© => ‚ü®z, hf h h‚ÇÅ, hg h h‚ÇÇ‚ü©

@[gcongr]
lemma compRel_mono {f g h k : Set (Œ± √ó Œ±)} (h‚ÇÅ : f ‚äÜ h) (h‚ÇÇ : g ‚äÜ k) : f ‚óã g ‚äÜ h ‚óã k :=
  fun _ ‚ü®z, h, h'‚ü© => ‚ü®z, h‚ÇÅ h, h‚ÇÇ h'‚ü©

lemma prodMk_mem_compRel (hxy : (x, y) ‚àà U) (hyz : (y, z) ‚àà V) : (x, z) ‚àà U ‚óã V := ‚ü®y, hxy, hyz‚ü©

@[deprecated (since := "2025-03-10")] alias prod_mk_mem_compRel := prodMk_mem_compRel

@[simp] lemma id_compRel : idRel ‚óã U = U := Set.ext fun ‚ü®a, b‚ü© => by simp

lemma compRel_assoc : U ‚óã V ‚óã W  = U ‚óã (V ‚óã W) := by ext ‚ü®a, b‚ü©; simp only [mem_compRel]; tauto

lemma left_subset_compRel (h : idRel ‚äÜ V) : U ‚äÜ U ‚óã V := fun ‚ü®_x, y‚ü© xy_in ‚Ü¶ ‚ü®y, xy_in, h <| rfl‚ü©

lemma right_subset_compRel (h : idRel ‚äÜ U) : V ‚äÜ U ‚óã V := fun ‚ü®x, _y‚ü© xy_in ‚Ü¶ ‚ü®x, h <| rfl, xy_in‚ü©

lemma subset_comp_self (h : idRel ‚äÜ U) : U ‚äÜ U ‚óã U := left_subset_compRel h

lemma subset_iterate_compRel (h : idRel ‚äÜ U) : ‚àÄ {V} n, V ‚äÜ (U ‚óã ¬∑)^[n] V
  | _V, 0 => .rfl
  | _V, n + 1 => (right_subset_compRel h).trans <| subset_iterate_compRel h n

/-- The relation is invariant under swapping factors. -/
def IsSymmetricRel (U : Set (Œ± √ó Œ±)) : Prop := Prod.swap ‚Åª¬π' U = U

@[deprecated (since := "2025-03-05")] alias SymmetricRel := IsSymmetricRel

/-- The maximal symmetric relation contained in a given relation. -/
def symmetrizeRel (U : Set (Œ± √ó Œ±)) : Set (Œ± √ó Œ±) := U ‚à© Prod.swap ‚Åª¬π' U

lemma symmetric_symmetrizeRel (U : Set (Œ± √ó Œ±)) : IsSymmetricRel (symmetrizeRel U) := by
  simp [IsSymmetricRel, symmetrizeRel, preimage_inter, inter_comm, ‚Üê preimage_comp]

lemma symmetrizeRel_subset_self (U : Set (Œ± √ó Œ±)) : symmetrizeRel U ‚äÜ U := sep_subset _ _

@[gcongr] lemma symmetrize_mono (h : U ‚äÜ V) : symmetrizeRel U ‚äÜ symmetrizeRel V :=
  inter_subset_inter h <| preimage_mono h

lemma IsSymmetricRel.mk_mem_comm (hU : IsSymmetricRel U) : (x, y) ‚àà U ‚Üî (y, x) ‚àà U :=
  Set.ext_iff.1 hU (y, x)

@[deprecated (since := "2025-03-05")] alias SymmetricRel.mk_mem_comm := IsSymmetricRel.mk_mem_comm

lemma IsSymmetricRel.eq (hU : IsSymmetricRel U) : Prod.swap ‚Åª¬π' U = U := hU

@[deprecated (since := "2025-03-05")] alias SymmetricRel.eq := IsSymmetricRel.eq

lemma IsSymmetricRel.inter (hU : IsSymmetricRel U) (hV : IsSymmetricRel V) :
    IsSymmetricRel (U ‚à© V) := by rw [IsSymmetricRel, preimage_inter, hU.eq, hV.eq]

@[deprecated (since := "2025-03-05")] alias SymmetricRel.inter := IsSymmetricRel.inter

lemma IsSymmetricRel.iInter {U : (i : Œπ) ‚Üí Set (Œ± √ó Œ±)} (hU : ‚àÄ i, IsSymmetricRel (U i)) :
    IsSymmetricRel (‚ãÇ i, U i) := by simp_rw [IsSymmetricRel, preimage_iInter, (hU _).eq]

lemma IsSymmetricRel.preimage_prodMap (hU : IsSymmetricRel U) (f : Œ≤ ‚Üí Œ±) :
    IsSymmetricRel (Prod.map f f ‚Åª¬π' U) := Set.ext fun _ ‚Ü¶ hU.mk_mem_comm

/-!
### Balls
-/

namespace UniformSpace

/-- The ball around `(x : Œ±)` with respect to `(V : Set (Œ± √ó Œ±))`. Intended to be
used for `V ‚àà ùì§ Œ±`, but this is not needed for the definition. Recovers the
notions of metric space ball when `V = {p | dist p.1 p.2 < r }`. -/
def ball (x : Œ±) (V : Set (Œ± √ó Œ±)) : Set Œ± := Prod.mk x ‚Åª¬π' V

open UniformSpace (ball)

/-- The triangle inequality for `UniformSpace.ball`. -/
lemma mem_ball_comp (hxy : y ‚àà ball x U) (hyz : z ‚àà ball y V) : z ‚àà ball x (U ‚óã V) :=
  prodMk_mem_compRel hxy hyz

lemma ball_subset_of_comp_subset (h : x ‚àà ball y V) (hVU : V ‚óã V ‚äÜ U) : ball x V ‚äÜ ball y U :=
  fun _z hz => hVU (mem_ball_comp h hz)

lemma ball_mono (h : U ‚äÜ V) (x : Œ±) : ball x U ‚äÜ ball x V := preimage_mono h

lemma ball_inter (x : Œ±) (U V : Set (Œ± √ó Œ±)) : ball x (U ‚à© V) = ball x U ‚à© ball x V :=
  preimage_inter

lemma ball_inter_left (x : Œ±) (U W : Set (Œ± √ó Œ±)) : ball x (U ‚à© W) ‚äÜ ball x U :=
  ball_mono inter_subset_left x

lemma ball_inter_right (x : Œ±) (U W : Set (Œ± √ó Œ±)) : ball x (U ‚à© W) ‚äÜ ball x W :=
  ball_mono inter_subset_right x

lemma ball_iInter (x : Œ±) (U : Œπ ‚Üí Set (Œ± √ó Œ±)) : ball x (‚ãÇ i, U i) = ‚ãÇ i, ball x (U i) :=
  preimage_iInter

lemma mem_ball_symmetry (hU : IsSymmetricRel U) : x ‚àà ball y U ‚Üî y ‚àà ball x U := hU.mk_mem_comm

lemma ball_eq_of_symmetry (hU : IsSymmetricRel U) : ball x U = {y | (y, x) ‚àà U} := by
  ext y; exact mem_ball_symmetry hU

lemma mem_comp_of_mem_ball (hU : IsSymmetricRel U) (hx : x ‚àà ball z U) (hy : y ‚àà ball z V) :
    (x, y) ‚àà U ‚óã V := by rw [mem_ball_symmetry hU] at hx; exact ‚ü®z, hx, hy‚ü©

lemma mem_comp_comp (hV : IsSymmetricRel V) {p : Œ± √ó Œ±} :
    p ‚àà U ‚óã W ‚óã V ‚Üî (ball p.1 U √óÀ¢ ball p.2 V ‚à© W).Nonempty := by
  simp [compRel, Set.Nonempty, ball, ‚Üê exists_and_right, ‚Üê and_assoc, and_right_comm (b := _ ‚àà W),
    hV.mk_mem_comm]
  rw [exists_comm]

end UniformSpace
